{"version":3,"sources":["components/Navbar.js","components/Home.js","components/UserProfile.js","components/Login.js","components/AccountBalance.js","components/Debits.js","components/Credits.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","className","to","src","alt","width","height","Component","Home","UserProfile","this","props","userName","memberSince","LogIn","handleChange","e","updatedUser","state","user","inputField","target","name","inputValue","value","date","Date","getMonth","getDate","getFullYear","setState","handleSubmit","preventDefault","mockLogIn","redirect","password","onSubmit","htmlFor","type","onChange","AccountBalance","accountBalance","toFixed","creditsAmount","debitsAmount","Debits","debits","map","debit","slice","amount","description","id","addDebit","step","Credits","credits","credit","addCredit","App","logInInfo","newUser","currentUser","date_str","newDebit","length","Number","newCredit","a","linkToCreditsAPI","axios","get","response","console","log","data","status","getDebitsBalance","getCreditsBalance","exact","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a949fea.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Navbar extends Component{\r\n    render(){\r\n        // Added navbar with links to other components\r\n        // Navbar app logo links to the Home page\r\n        return(\r\n            <div className=\"topnav\">\r\n                <Link to=\"/userProfile\">Profile</Link>\r\n                <Link to=\"/login\">Login</Link>\r\n                <Link to=\"/credits\">Credits</Link>\r\n                <Link to=\"/debits\">Debits</Link>\r\n                <div className=\"topnav-right\">\r\n                    <Link to=\"/\">\r\n                        <img src=\"/logo192.png\" alt=\"react-logo\" width=\"25\" height=\"25\"/>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navbar;","// src/components/Home.js\r\n// The Home component is used to demonstrate the use of Link.\r\n\r\nimport React, {Component} from 'react';\r\nimport Navbar from './Navbar';\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    \r\n    //Render items to show in Home component\r\n    return (\r\n      <div>\r\n        <Navbar/>\r\n        <h1 className='page-title'>Bank of React</h1>\r\n        <div className=\"big-icon\">\r\n          <img src=\"/logo512.png\" alt=\"big-logo\"/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;","// src/components/UserProfile.js\r\n// The UserProfile component is used to demonstrate the use of Route and Link.\r\n\r\nimport React, {Component} from 'react';\r\nimport Navbar from './Navbar';\r\n\r\nclass UserProfile extends Component {\r\n  //Render items to show in UserProfile component\r\n  render() {\r\n    return (\r\n        <div>\r\n          <Navbar/>\r\n          <h1 className='page-title'>User Profile</h1>\r\n\r\n          <div>Username: {this.props.userName}</div>\r\n          <div>Member Since: {this.props.memberSince}</div>\r\n    \r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserProfile;","// src/components/Login.js\r\n// The LogIn component is used to demonstrate the use of Redirect.\r\n\r\nimport React, { Component } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport Navbar from './Navbar'\r\n\r\nclass LogIn extends Component {\r\n  constructor () {  // Create and initialize state\r\n    super()\r\n    this.state = {\r\n      user: {\r\n        userName: '',\r\n        password: '',\r\n        memberSince: '' // added memberSince to keep track of the day logged in\r\n      },\r\n      redirect: false\r\n    }\r\n  }\r\n\r\n  // When the user name input is changed, capture the input and update the state (user.userName)\r\n  handleChange = (e) => {\r\n    const updatedUser = {...this.state.user}\r\n    const inputField = e.target.name\r\n    const inputValue = e.target.value\r\n    updatedUser[inputField] = inputValue\r\n    //Set memberSince state of updated user equal to current date in mm/dd/yyyy format\r\n    let date=new Date()\r\n    updatedUser['memberSince']=(date.getMonth()+1)+\"/\"+date.getDate()+\"/\"+date.getFullYear()\r\n    this.setState({user: updatedUser})\r\n  }\r\n\r\n  // When user clicked \"Log In\" button, store user data and then redirect to \"User Profile\" page\r\n  handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    this.props.mockLogIn(this.state.user)\r\n    this.setState({redirect: true})\r\n  }\r\n  \r\n  render () {\r\n    if (this.state.redirect) {  // Redirect to \"User Profile\" page when \"Log In\" button is clicked\r\n      return (<Redirect to=\"/userProfile\"/>)\r\n    }\r\n    // Render the login form\r\n    return (\r\n      <div>\r\n        <Navbar/>\r\n        <h1 className='page-title'>Login</h1>\r\n\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div>\r\n            <label htmlFor=\"userName\">User Name</label>\r\n            <input type=\"text\" name=\"userName\" onChange={this.handleChange} value={this.state.user.userName} />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"password\">Password</label>\r\n            <input type=\"password\" name=\"password\" />\r\n          </div>\r\n          <button>Log In</button>\r\n        </form>                  \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LogIn","// src/components/AccountBalance.js\r\n// Account balance component is used in Credits and Debits components to show account balance, total credits and total debits\r\nimport React, {Component} from 'react';\r\n\r\nclass AccountBalance extends Component {\r\n  render() {\r\n    return (\r\n      //className added for styling in index.css\r\n      //accountBalance, creditsAmount, debitAmount are props passed from other components\r\n      //toFixed function used to change the props to 2 decimal places\r\n      <div className='balance'>\r\n        <h2>\r\n          Balance: {this.props.accountBalance.toFixed(2)}\r\n          <br/>\r\n          <br/>\r\n          <br/>\r\n          Credits: {this.props.creditsAmount.toFixed(2)}\r\n          <br/>\r\n          Debits: {this.props.debitsAmount.toFixed(2)}\r\n        </h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AccountBalance;","// src/components/Debits.js\r\n// Debits component takes props and renders credits data appropriately \r\nimport AccountBalance from \"./AccountBalance\";\r\nimport Navbar from \"./Navbar\";\r\n\r\n// Array of debits is taken as a prop\r\nconst Debits = (props) => {\r\n  // Function debitsView goes through prop array and returns each item as html <li>\r\n  let debitsView = () => {\r\n    const { debits } = props;\r\n    //Each of the items in prop array debits is read and displayed in <li>\r\n    return debits.map((debit) => {\r\n      let date = debit.date.slice(0,10); //Get the first 10 characters of date array\r\n      return <li className=\"items-list\" key={debit.id}>{debit.amount} {debit.description} {date}</li>\r\n    }) \r\n  }\r\n\r\n    // Render items in the Debits component\r\n  return (\r\n    <div>\r\n      <Navbar/>\r\n      <AccountBalance accountBalance={props.accountBalance} creditsAmount={props.creditsAmount} debitsAmount={props.debitsAmount}/>\r\n      <h1 className=\"debit-credit-title\">Debits</h1>\r\n      {debitsView()}\r\n      <form className=\"add-form\" onSubmit={props.addDebit}>\r\n        <input type=\"text\" name=\"description\" />\r\n        <input type=\"number\" step={0.01} name=\"amount\" />\r\n        <button type=\"submit\">Add Debit</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Debits;","// src/components/Credits.js\r\n// Credits component takes props and renders credits data appropriately \r\nimport AccountBalance from \"./AccountBalance\";\r\nimport Navbar from \"./Navbar\";\r\n\r\n// Array of credits is taken as a prop\r\nconst Credits = (props) => {\r\n  // Function credits goes through prop array and returns each item as html <li> \r\n  let creditsView = () => {\r\n    const { credits } = props;\r\n    //Each of the items in prop array credits is read and displayed in <li>\r\n    return credits.map((credit) => {\r\n      let date = credit.date.slice(0,10); //Get the first 10 characters of date array\r\n      return <li className=\"items-list\" key={credit.id}>{credit.amount} {credit.description} {date}</li>\r\n    }) \r\n  }\r\n  \r\n  // Render items in the Credits component\r\n  return (\r\n    <div>\r\n      <Navbar/>   \r\n      <AccountBalance accountBalance={props.accountBalance} creditsAmount={props.creditsAmount} debitsAmount={props.debitsAmount}/>\r\n      <h1 className=\"debit-credit-title\">Credits</h1>\r\n      {creditsView()}\r\n      <form className=\"add-form\" onSubmit={props.addCredit}>\r\n        <input type=\"text\" name=\"description\" />\r\n        <input type=\"number\" step={0.01} name=\"amount\" />\r\n        <button type=\"submit\">Add Credit</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Credits;","// src/App.js\r\n\r\nimport React, {Component} from 'react';\r\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\r\nimport Home from './components/Home';\r\nimport UserProfile from './components/UserProfile';\r\nimport LogIn from './components/Login';\r\nimport Debits from './components/Debits';\r\nimport axios from 'axios';\r\nimport Credits from './components/Credits';\r\n\r\nclass App extends Component {\r\n  constructor() {  // Create and initialize state\r\n    super(); \r\n    this.state = {\r\n      currentUser: {\r\n        userName: 'Joe Smith',\r\n        memberSince: '07/23/96',\r\n      },\r\n      // added states to keep track of debits and credits\r\n      accountBalance:0,\r\n      creditsAmount:0,\r\n      debitsAmount:0,\r\n      debits:[],\r\n      credits:[]\r\n    }\r\n  }\r\n\r\n  // Update state's currentUser (userName) after \"Log In\" button is clicked\r\n  mockLogIn = (logInInfo) => {  \r\n    const newUser = {...this.state.currentUser}\r\n    newUser.userName = logInInfo.userName\r\n    newUser.memberSince= logInInfo.memberSince\r\n    this.setState({currentUser: newUser})\r\n  }\r\n\r\n  // Make async API call to retrieve data from remote website\r\n  async componentDidMount() {\r\n    let linkToDebitsAPI = 'https://moj-api.herokuapp.com/debits';  // Link to remote website API for debits\r\n    let linkToCreditsAPI = 'https://moj-api.herokuapp.com/credits'; // Link to remote website API for credits\r\n\r\n    // Await for promise (completion) returned from API call\r\n    try {  // Accept success response as array of JSON objects (debits)\r\n      let response = await axios.get(linkToDebitsAPI);\r\n      console.log(response);  // Print out response\r\n      // To get data object in the response, need to use \"response.data\"\r\n      this.setState({debits: response.data});  // Store received data in state's \"debits\" object\r\n    } \r\n    catch (error) {  // Print out errors at console when there is an error response\r\n      if (error.response) {\r\n        // The request was made, and the server responded with error message and status code.\r\n        console.log(error.response.data);  // Print out error message (e.g., Not Found)\r\n        console.log(error.response.status);  // Print out error status code (e.g., 404)\r\n      }    \r\n    }\r\n    \r\n    // Await for promise (completion) returned from API call\r\n    try {  // Accept success response as array of JSON objects (credits)\r\n      let response = await axios.get(linkToCreditsAPI);\r\n      console.log(response);  // Print out response\r\n      // To get data object in the response, need to use \"response.data\"\r\n      this.setState({credits: response.data});  // Store received data in state's \"credits\" object\r\n    } \r\n    catch (error) {  // Print out errors at console when there is an error response\r\n      if (error.response) {\r\n        // The request was made, and the server responded with error message and status code.\r\n        console.log(error.response.data);  // Print out error message (e.g., Not Found)\r\n        console.log(error.response.status);  // Print out error status code (e.g., 404)\r\n      }    \r\n    }\r\n\r\n    // getDebitsBalance maps through each item of debits state\r\n    // for each item, add amount to debitsAmount state and subtract the amount from accountBalance\r\n    let getDebitsBalance= () => {\r\n      this.state.debits.map((debit) => (\r\n        this.setState({\r\n          accountBalance: this.state.accountBalance-Number(debit.amount), // assign new values to accountBalance and creditsAmount using setState\r\n          debitsAmount: this.state.debitsAmount + Number(debit.amount)\r\n        })\r\n      )) \r\n    }\r\n    \r\n    getDebitsBalance(); // call getDebitsBalance\r\n\r\n    // getCreditsBalance maps through each item of credits state\r\n    // for each item, add amount to creditsAmount state and add the amount to accountBalance\r\n    let getCreditsBalance= () => {\r\n      this.state.credits.map((credit) => (\r\n        this.setState({\r\n          accountBalance: this.state.accountBalance+Number(credit.amount), // assign new values to accountBalance and creditsAmount using setState\r\n          creditsAmount: this.state.creditsAmount + Number(credit.amount)\r\n        })\r\n      )) \r\n    }\r\n\r\n    getCreditsBalance(); // call getCreditsBalance\r\n  } \r\n\r\n  // function addDebit executed when submit button is clicked in Debits component\r\n  addDebit =(e)=>{\r\n    e.preventDefault(); // don't allow the default behavior or submit button click\r\n    // get the items from input fields in variables\r\n    let description=e.target[0].value;\r\n    let amount=e.target[1].value;\r\n    // get the current date in mm-dd-yyyy format\r\n    let date=new Date();\r\n    let date_str=(date.getMonth()+1)+\"-\"+date.getDate()+\"-\"+date.getFullYear();\r\n    // assign a unique id based on the size of the debits array\r\n    let id=this.state.debits.length+1;\r\n    // create new object using the data from input field, the date and id\r\n    let newDebit={\r\n      id: id,\r\n      description:description,\r\n      amount:amount,\r\n      date:date_str  \r\n    }\r\n    // update accountBalance and debitsAmount states with the amount from input field\r\n    // update debits array state by adding the newDebit object\r\n    this.setState({\r\n      debits:[...this.state.debits,newDebit], \r\n      accountBalance:(this.state.accountBalance-Number(amount)),\r\n      debitsAmount: this.state.debitsAmount + Number(amount)\r\n    });\r\n  }\r\n\r\n  // function addCredit executed when submit button is clicked in Credits component\r\n  addCredit =(e)=>{\r\n    e.preventDefault(); // don't allow the default behavior or submit button click\r\n    // get the items from input fields in variables\r\n    let description=e.target[0].value;\r\n    let amount=e.target[1].value;\r\n    // get the current date in mm-dd-yyyy format\r\n    let date=new Date();\r\n    let date_str=(date.getMonth()+1)+\"-\"+date.getDate()+\"-\"+date.getFullYear();\r\n    // assign a unique id based on the size of the credits array\r\n    let id=this.state.credits.length+1;\r\n    // create new object using the data from input field, the date and id\r\n    let newCredit={\r\n      id: id,\r\n      description:description,\r\n      amount:amount,\r\n      date:date_str  \r\n    }\r\n    // update accountBalance and creditsAmount states with the amount from input field\r\n    // update credits array state by adding the newCredit object\r\n    this.setState({\r\n      credits:[...this.state.credits,newCredit], \r\n      accountBalance:(this.state.accountBalance+Number(amount)),\r\n      creditsAmount: this.state.creditsAmount + Number(amount)\r\n    });\r\n  }\r\n\r\n  // Create Routes and React elements to be rendered using React components\r\n  // Props are passed to components where appropriate \r\n  render() {  \r\n    const HomeComponent = () => (<Home/>);\r\n    \r\n    const UserProfileComponent = () => (\r\n      <UserProfile userName={this.state.currentUser.userName} memberSince={this.state.currentUser.memberSince}/>\r\n    );\r\n    \r\n    const LogInComponent = () => (<LogIn user={this.state.currentUser} mockLogIn={this.mockLogIn}/>)  // Pass props to \"LogIn\" component\r\n\r\n    const DebitsComponent = () =>(<Debits \r\n      accountBalance={this.state.accountBalance} \r\n      debits={this.state.debits} \r\n      addDebit={this.addDebit} \r\n      creditsAmount={this.state.creditsAmount} \r\n      debitsAmount={this.state.debitsAmount}/>\r\n    );  \r\n\r\n    const CreditsComponent = () =>(<Credits \r\n      accountBalance={this.state.accountBalance} \r\n      credits={this.state.credits} \r\n      addCredit={this.addCredit}\r\n      creditsAmount={this.state.creditsAmount} \r\n      debitsAmount={this.state.debitsAmount}/>\r\n    );  \r\n    return (\r\n      <Router>\r\n        <div>\r\n          <Route exact path=\"/\" render={HomeComponent}/>\r\n          <Route exact path=\"/userProfile\" render={UserProfileComponent}/>\r\n          <Route exact path=\"/login\" render={LogInComponent}/>\r\n          <Route exact path=\"/debits\" render={DebitsComponent}/>\r\n          <Route exact path=\"/credits\" render={CreditsComponent}/>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}